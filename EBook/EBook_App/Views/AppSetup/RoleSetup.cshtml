@{
    ViewBag.Title = "Role Setup";
    Layout = "~/Views/Shared/_Masterpage.cshtml";
    ViewBag.IsLoadKendo = true;
}

<link rel="stylesheet" type="text/css" href="~/css/select2.min.css?ID=@ViewBag.GUID">

<style>
    .tabs-container #tab4:checked ~ #content4,
    .tabs-container #tab3:checked ~ #content3,
    .tabs-container #tab2:checked ~ #content2,
    .tabs-container #tab1:checked ~ #content1 {
        display: block;
    }
</style>

<!--Wrapper Start -->
<div class="container-fluid p-4 bg-white rounded">

    <div class="logo text-center border-bottom">
        <h3 class="box-title mb-3">ROLE SETUP</h3>
    </div>

    <div class="row tabs-container">
        <div class="col-lg-12 col-md-12 col-sm-12 tab-content">
            @if (ViewBag.RightsListObj.IsView)
            {
                <input id="tab1" type="radio" name="tabs" checked>
                <label for="tab1" class="tabs-label"><i>R</i>Role</label>
                <input id="tab2" type="radio" name="tabs">
                <label for="tab2" class="tabs-label"><i>RG</i>Role Group</label>
                <input id="tab3" type="radio" name="tabs">
                <label for="tab3" class="tabs-label"><i>RGM</i>Role Group Mapping</label>
                <input id="tab4" type="radio" name="tabs">
                <label for="tab4" class="tabs-label"><i>DRM</i>Department Role Mapping</label>
            }
            @Html.Hidden("RoleList", (object)ViewBag.RoleList)
            @Html.Hidden("RoleGroupList", (object)ViewBag.RoleGroupList)
            @Html.Hidden("DepartmentList", (object)ViewBag.DepartmentList)
            @Html.Hidden("RightsList", (object)ViewBag.RightsList)

            <!-- Role Grid Add / Edit Start -->
            <section id="content1">
                <div class="row">
                    <div class="col-lg-12" style="font-size:0.75em" id="tablerecord">
                        <div class="w-100 text-right">
                            <div class="button-group">
                                <button type="button" class="btn Theme-button font-weight-medium" style="display: none" id="rolesetupmodalbutton" onclick="GetAddEditRoleSetupModal(0);">+ Add New Role</button>
                            </div>
                        </div>
                        <div class="col-md-12 col-sm-12 col-xs-12">
                            <div class="panel box box-info">
                                <div class="panel-body">
                                    <div class="row">
                                        <div class="col-md-12 col-sm-12 col-xs-12">
                                            <div id="grid"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            <!-- Role Grid Add / Edit End -->
            <!-- Role Group Grid Add / Edit Start -->
            <section id="content2">

                <div class="row">
                    <div class="col-lg-12" style="font-size:0.75em" id="tablerecord">
                        <div class="w-100 text-right">
                            <div class="button-group">
                                <button type="button" class="btn Theme-button font-weight-medium" style="display: none" id="rolegroupmodalbutton" onclick="GetAddEditRoleGroupModal(0);">+ Add New Role Group</button>
                            </div>
                        </div>
                        <div class="col-md-12 col-sm-12 col-xs-12">
                            <div class="panel box box-info">
                                <div class="panel-body">
                                    <div class="row">
                                        <div class="col-md-12 col-sm-12 col-xs-12">
                                            <div id="grid1"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </section>
            <!-- Role Group Grid Add / Edit End -->
            <!-- Role Group Mapping Grid Add / Edit Start -->
            <section id="content3">
                <div class="row">
                    <div class="col-lg-12" style="font-size:0.75em" id="tablerecord">
                        <div class="w-100 text-right">
                            <div class="button-group">
                                <button type="button" class="btn Theme-button font-weight-medium" style="display: none" id="rolegroupmappingmodalbutton" onclick="GetAddEditRoleGroupMappingModal(0);">+ Add New Role Group Mapping</button>
                            </div>
                        </div>
                        <div class="col-md-12 col-sm-12 col-xs-12">
                            <div class="panel box box-info">
                                <div class="panel-body">
                                    <div class="row">
                                        <div class="col-md-12 col-sm-12 col-xs-12">
                                            <div id="grid2"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            <!-- Role Group Mapping Grid Add / Edit End -->
            <!-- Department Role Mapping Grid Add / Edit Start -->
            <section id="content4">
                <div class="row">
                    <div class="col-lg-12" style="font-size:0.75em" id="tablerecord">
                        <div class="w-100 text-right">
                            <div class="button-group">
                                <button type="button" class="btn Theme-button font-weight-medium" style="display: none" id="departmentrolemappingmodalbutton" onclick="GetAddEditDepartmentRoleMappingModal(0);">+ Add New Department Role Mapping</button>
                            </div>
                        </div>
                        <div class="col-md-12 col-sm-12 col-xs-12">
                            <div class="panel box box-info">
                                <div class="panel-body">
                                    <div class="row">
                                        <div class="col-md-12 col-sm-12 col-xs-12">
                                            <div id="grid3"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            <!-- Department Role Mapping Grid Add / Edit End -->

        </div>
    </div>

</div>
<!--Wrapper End -->

<script src="~/js/GridFilter2.js?ID=@ViewBag.GUID"></script>
<script src="~/js/select2.js?ID=@ViewBag.GUID" type="text/javascript"></script>
<script src="~/js/custom-Validation.js?ID=@ViewBag.GUID"></script>

@section scripts {
    <script>
        var RoleList = JSON.parse($("#RoleList").val());
        var RoleGroupList = JSON.parse($("#RoleGroupList").val());
        var DepartmentList = JSON.parse($("#DepartmentList").val());
        var RightsList = JSON.parse($("#RightsList").val());
        var Role_pageSize = 30;
        var RoleGroup_pageSize = 30;
        var RoleGroupMap_pageSize = 30;
        var DepartmentRoleMap_pageSize = 30;
        var requiredFields;

        $(".kendoDatePicker").kendoDatePicker({
            animation: false,
            format: "MM/dd/yyyy",
            open: function (e) {

                var clearbuttonContainer = e.sender.dateView.calendar.element.find(".clear-button-container");

                if (!clearbuttonContainer.length) {
                    // Create a container for custom buttons
                    clearbuttonContainer = $('<div class="k-footer clear-button-container"></div>');

                    // Create custom button (Clear Date) and append it to the container
                    var clearbutton = $('<button tabindex="-1" class="k-button custom-clear-button k-flex k-button-md k-button-flat k-button-flat-primary k-rounded-md" title="Clear Date"><span style="color:red" class="k-button-text">Clear Date</span></button>');
                    clearbuttonContainer.append(clearbutton);

                    // Append the custom buttons container to the DatePicker popup
                    e.sender.dateView.calendar.element.append(clearbuttonContainer);

                    // Handle click events for the custom button
                    clearbutton.on("click", function () {
                        // Clear the selected date
                        e.sender.value(new Date());
                        e.sender.value(null);
                        // Close the DatePicker
                        e.sender.close();
                    });
                }
            }
        });
        $(".select2").select2();
        SetPageRights();
        //Load Grids
        if (RightsList.IsView) {
            RoleGridLoad();
            $("#tab1").change(function () {
                if ($(this).is(":checked")) {

                    if ($("#grid").data("kendoGrid")) {
                        return;
                    }
                    RoleGridLoad();
                }
            });
            $("#tab2").change(function () {
                if ($(this).is(":checked")) {

                    if ($("#grid1").data("kendoGrid")) {
                        return;
                    }
                    RoleGroupGridLoad();
                }
            });
            $("#tab3").change(function () {
                if ($(this).is(":checked")) {

                    if ($("#grid2").data("kendoGrid")) {
                        return;
                    }
                    RoleGroupMappingGridLoad();
                }
            });
            $("#tab4").change(function () {
                if ($(this).is(":checked")) {

                    if ($("#grid3").data("kendoGrid")) {
                        return;
                    }
                    DepartmentRoleMappingGridLoad();
                }
            });
        }

        function SetPageRights() {
            if (RightsList.IsAdd) {
                $('#rolesetupmodalbutton').show();
                $('#rolegroupmodalbutton').show();
                $('#rolegroupmappingmodalbutton').show();
                $('#departmentrolemappingmodalbutton').show();
            }
        }

        //Set Global Options
        var RoleOptions;
        var RoleGroupOptions;
        var RoleGroupMapOptions;
        var DepartmentRoleMapOptions;
        function SetGlobalOption(id, option) {
            if (id == 'grid') {
                RoleOptions = option;
            }
            else if (id == 'grid1') {
                RoleGroupOptions = option;
            }
            else if (id == 'grid2') {
                RoleGroupMapOptions = option;
            }
            else if (id == 'grid3') {
                DepartmentRoleMapOptions = option;
            }
        }

        //Role - Add/Edit/Model/Remove
        function RoleGridLoad() {
            $("#PageLoader").show();
            $("#grid").empty();
            var Rolefieldstype = {
                rowno: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                R_ID: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                RoleName: { type: KendoFilterTypes.String, srtype: SRVTypes.String },
                Sort_: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                IsActive: { type: KendoFilterTypes.Boolean, srtype: SRVTypes.Boolean },
            }
            var _griddatasource = GetGridDataSourceAjaxCommon('grid', Role_pageSize, "/Account/GetFilterData_Role_List", true, true, true, Rolefieldstype, false, false);
            $("#grid").kendoGrid({
                dataSource: _griddatasource,
                responsive: false,
                pageable: {
                    alwaysVisible: true,
                    refresh: true,
                    pageSizes: [30, 50, 100, 500, 1000, 5000],
                    messages: {
                        display: "{0} - {1} of {2} items &nbsp;&nbsp;|&nbsp;&nbsp; Export:&nbsp;<img id='grid_exportExcel' title='Click here to export to excel file' src='/icon/excel_icon.jpg' style='width:23px; height:23px; cursor:pointer' onclick='onClickRoleExportExcel(this)' /> ",
                        empty: "No data found",
                    }
                },
                sortable: true,
                resizable: false,
                reorderable: false,
                noRecords: true,
                filterable: {
                    extra: true,
                },
                dataBound: onDataBound,
                dataBinding: function (e) {
                    $("#PageLoader").hide();
                },
                columns: [
                    {
                        field: "rowno",
                        title: "Row No ",
                        width: 100,
                        filterable: false,
                        sortable: false,
                    },
                    {
                        field: "R_ID",
                        title: "Role ID ",
                        width: 120,
                        filterable: false,
                        sortable: false,
                        // hidden: true,
                    },
                    {
                        field: "R_ID",
                        originalfield: "RoleName",
                        title: "Role Name",
                        width: 200,
                        template: function (dataItem) {
                            return dataItem.RoleName;
                        },
                        filterable: { multi: true, extra: false, search: true, checkAll: false },
                        values: RoleList,
                    },
                    {
                        field: "Sort_",
                        title: "Sort_",
                        width: 190,
                    },
                    {
                        field: "IsActive",
                        title: "IsActive",
                        width: 120,
                        template: function (dataItem) {
                            if (RightsList.IsEdit) {
                                if (dataItem.IsActive) {
                                    return '<img src="../icon/tick.png" alt="Active" class="cursor-pointer" onclick="Role_Remove(this,' + dataItem.R_ID + ',' + dataItem.IsActive + ');"/>';
                                } else {
                                    return '<img src="../icon/cross.png" alt="Inactive" class="cursor-pointer" onclick="Role_Remove(this,' + dataItem.R_ID + ',' + dataItem.IsActive + ');"/>';
                                }
                            }
                            else {
                                if (dataItem.IsActive) {
                                    return '<img src="../icon/tick.png"/>';
                                } else {
                                    return '<img src="../icon/cross.png"/>';
                                }
                            }
                        },
                        attributes: {
                            style: "text-align: center;"
                        }
                    },
                    {
                        title: "Action",
                        width: 100,
                        filterable: false,
                        template: function (dataItem) {
                            var actionfield = '';
                            if (RightsList.IsEdit) {
                                actionfield += '<a><i class="fa fa-edit Theme-icon fa-1x ms-1 cursor-pointer" onclick="GetAddEditRoleSetupModal(' + dataItem.R_ID + ');"></i></a>'
                            }
                            return actionfield;
                        }
                    },
                ],
                detailInit: function (e) {
                    $("#PageLoader").hide();
                }
            });
        }
        function GetAddEditRoleSetupModal(RoleID) {
            if ((RoleID == 0 && RightsList.IsAdd == true) || (RoleID > 0 && RightsList.IsEdit == true)) {
                GetAddEditModalAjaxCommon(RoleID, "/Account/GetAddEditRoleSetupModal");
            } else {
                WarningMessage('No Rights', "You Don't Have Rights To Access.", true, "Ok");
                $("#PageLoader").hide();
                return;
            }
        }
        function AddOrEditRole() {
            var ObjJson = new Object();
            ObjJson.RoleID = $("#modalroleid").val();
            ObjJson.RoleName = $("#modalrolename").val();
            ObjJson.Active = $("#modalroleisactive").is(":checked");
            var JsonData = JSON.stringify(ObjJson);
            requiredFields = ['RoleName'];
            if (!validateRequiredFields(ObjJson, requiredFields)) {
                return;
            }
            AddEditRemoveAjaxCommon(JsonData, "/Account/AddOrEdit_Role", null, false, 'grid');
        }
        function Role_Remove(this_, RoleID, IsActive) {
            if (RightsList.IsDelete) {
                if ($(this_).attr("disabled") == "disabled") {
                    return;
                }
                $(this_).attr("disabled", "disabled");
                IsActiveEditCommon(RoleID, "/Account/Remove_Role", removeRoleGridRefresh, RoleID, IsActive, "Role ID");
            }else{
                WarningMessage('No Rights', "You Don't Have Rights To Access.", true, "Ok");
                $("#PageLoader").hide();
                return;
            }
        }
        function removeRoleGridRefresh() {
            RefreshGridData('grid')
        }


        //Role Group - Add/Edit/Model/Remove
        function RoleGroupGridLoad() {
            $("#PageLoader").show();
            $("#grid1").empty();
            var RoleGroupfieldstype = {
                rowno: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                RG_ID: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                RoleGroupName: { type: KendoFilterTypes.String, srtype: SRVTypes.String },
                Sort_: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                IsActive: { type: KendoFilterTypes.Boolean, srtype: SRVTypes.Boolean },
            }
            var _griddatasource1 = GetGridDataSourceAjaxCommon('grid1', RoleGroup_pageSize, "/Account/GetFilterData_RoleGroup_List", true, true, true, RoleGroupfieldstype, false, false);
            $("#grid1").kendoGrid({
                dataSource: _griddatasource1,
                responsive: false,
                pageable: {
                    alwaysVisible: true,
                    refresh: true,
                    pageSizes: [30, 50, 100, 500, 1000, 5000],
                    messages: {
                        display: "{0} - {1} of {2} items &nbsp;&nbsp;|&nbsp;&nbsp; Export:&nbsp;<img id='grid_exportExcel' title='Click here to export to excel file' src='/icon/excel_icon.jpg' style='width:23px; height:23px; cursor:pointer' onclick='onClickRoleGroupExportExcel(this)' /> ",
                        empty: "No data found",
                    }
                },
                sortable: true,
                resizable: false,
                reorderable: false,
                noRecords: true,
                filterable: {
                    extra: true,
                },
                dataBound: onDataBound,
                dataBinding: function (e) {
                    $("#PageLoader").hide();
                },
                columns: [
                    {
                        field: "rowno",
                        title: "Row No ",
                        width: 100,
                        filterable: false,
                        sortable: false,
                    },
                    {
                        field: "RG_ID",
                        title: "Role Group ID",
                        width: 180,
                        // hidden: true,
                    },
                    {
                        field: "RG_ID",
                        originalfield: "RoleGroupName",
                        title: "Role Group Name",
                        width: 200,
                        template: function (dataItem) {
                            return dataItem.RoleGroupName;
                        },
                        filterable: { multi: true, extra: false, search: true, checkAll: false },
                        values: RoleGroupList,
                    },
                    {
                        field: "Sort_",
                        title: "Sort_",
                        width: 160,

                    },
                    {
                        field: "IsActive",
                        title: "IsActive",
                        width: 120,
                        template: function (dataItem) {
                            if (RightsList.IsEdit) {
                                if (dataItem.IsActive) {
                                    return '<img src="../icon/tick.png" alt="Active" class="cursor-pointer" onclick="Role_Group_Remove(this,' + dataItem.RG_ID + ',' + dataItem.IsActive + ');"/>';
                                } else {
                                    return '<img src="../icon/cross.png" alt="Inactive" class="cursor-pointer" onclick="Role_Group_Remove(this,' + dataItem.RG_ID + ',' + dataItem.IsActive + ');"/>';
                                }
                            }
                            else {
                                if (dataItem.IsActive) {
                                    return '<img src="../icon/tick.png"/>';
                                } else {
                                    return '<img src="../icon/cross.png"/>';
                                }
                            }
                        },
                        attributes: {
                            style: "text-align: center;"
                        }
                    },
                    {
                        title: "Action",
                        width: 100,
                        filterable: false,
                        template: function (dataItem) {
                            var actionfield = '';
                            if (RightsList.IsEdit) {
                                actionfield += '<a><i class="fa fa-edit Theme-icon fa-1x ms-1 cursor-pointer" onclick="GetAddEditRoleGroupModal(' + dataItem.RG_ID + ');"></i></a>'
                            }
                            return actionfield;
                        }
                    },
                ],
                detailInit: function (e) {
                    $("#PageLoader").hide();
                }
            });
        }
        function GetAddEditRoleGroupModal(RoleGroupID) {
            if ((RoleGroupID == 0 && RightsList.IsAdd == true) || (RoleGroupID > 0 && RightsList.IsEdit == true)) {
                GetAddEditModalAjaxCommon(RoleGroupID, "/Account/GetAddEditRoleGroupModal");
            } else {
                WarningMessage('No Rights', "You Don't Have Rights To Access.", true, "Ok");
                $("#PageLoader").hide();
                return;
            }
        }
        function AddOrEdit_Role_Group() {
            var ObjJson = new Object();
            ObjJson.RoleGroupID = $("#modalrolegroupid").val();
            ObjJson.RoleGroupName = $("#modalrolegroupname").val();
            ObjJson.Active = $("#modalrolegroupisactive").is(":checked");
            var JsonData = JSON.stringify(ObjJson);
            requiredFields = ['RoleGroupName'];
            if (!validateRequiredFields(ObjJson, requiredFields)) {
                return;
            }
            AddEditRemoveAjaxCommon(JsonData, "/Account/AddOrEdit_Role_Group", null, false, 'grid1');
        }
        function Role_Group_Remove(this_, RoleGroupID, IsActive) {
            if (RightsList.IsDelete) {
                if ($(this_).attr("disabled") == "disabled") {
                    return;
                }
                $(this_).attr("disabled", "disabled");
                IsActiveEditCommon(RoleGroupID, "/Account/Remove_Role_Group", RoleGroupGridRefresh, RoleGroupID, IsActive, "Role Group ID");
            } else { 
                WarningMessage('No Rights', "You Don't Have Rights To Access.", true, "Ok");
                $("#PageLoader").hide();
                return;
            }
        }
        function RoleGroupGridRefresh() {
            RefreshGridData('grid1')
        }
       
        //Role Group Mapping - Add/Edit/Model/Remove
        function RoleGroupMappingGridLoad() {
            $("#PageLoader").show();
            $("#grid2").empty();
            var RoleGroupMapfieldstype = {
                rowno: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                RGM_ID: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                R_ID: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                RG_ID: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                RoleName: { type: KendoFilterTypes.String, srtype: SRVTypes.String },
                RoleGroupName: { type: KendoFilterTypes.String, srtype: SRVTypes.String },
                IsActive: { type: KendoFilterTypes.Boolean, srtype: SRVTypes.Boolean },
            }
            var _griddatasource2 = GetGridDataSourceAjaxCommon('grid2', RoleGroupMap_pageSize, "/Account/GetFilterData_RoleGroupMap_List", true, true, true, RoleGroupMapfieldstype, false, false);
            $("#grid2").kendoGrid({
                dataSource: _griddatasource2,
                responsive: false,
                pageable: {
                    alwaysVisible: true,
                    refresh: true,
                    pageSizes: [30, 50, 100, 500, 1000, 5000],
                    messages: {
                        display: "{0} - {1} of {2} items &nbsp;&nbsp;|&nbsp;&nbsp; Export:&nbsp;<img id='grid_exportExcel' title='Click here to export to excel file' src='/icon/excel_icon.jpg' style='width:23px; height:23px; cursor:pointer' onclick='onClickRoleGroupMapExportExcel(this)' /> ",
                        empty: "No data found",
                    }
                },
                sortable: true,
                resizable: false,
                reorderable: false,
                noRecords: true,
                filterable: {
                    extra: true,
                },
                dataBound: onDataBound,
                dataBinding: function (e) {
                    $("#PageLoader").hide();
                },
                columns: [
                    {
                        field: "rowno",
                        title: "Row No ",
                        width: 100,
                        filterable: false,
                        sortable: false,
                    },
                    {
                        field: "RGM_ID",
                        title: "RGM ID",
                        width: 120,
                        // hidden: true,
                    },
                    {
                        field: "R_ID",
                        title: "R ID",
                        width: 120,
                        // hidden: true,
                    },
                    {
                        field: "RG_ID",
                        title: "RG ID",
                        width: 120,
                        // hidden: true,
                    },
                    {
                        field: "RG_ID",
                        originalfield: "RoleGroupName",
                        title: "Role Group Name",
                        width: 200,
                        template: function (dataItem) {
                            return dataItem.RoleGroupName;
                        },
                        filterable: { multi: true, extra: false, search: true, checkAll: false },
                        values: RoleGroupList,
                    },
                    {
                        field: "R_ID",
                        originalfield: "RoleName",
                        title: "Role Name",
                        width: 200,
                        template: function (dataItem) {
                            return dataItem.RoleName;
                        },
                        filterable: { multi: true, extra: false, search: true, checkAll: false },
                        values: RoleList,
                    },
                    {
                        field: "IsActive",
                        title: "IsActive",
                        width: 120,
                        template: function (dataItem) {
                            if (RightsList.IsEdit) {
                                if (dataItem.IsActive) {
                                    return '<img src="../icon/tick.png" alt="Active" class="cursor-pointer" onclick="Role_Group_Mapping_Remove(this,' + dataItem.RGM_ID + ',' + dataItem.IsActive + ');"/>';
                                } else {
                                    return '<img src="../icon/cross.png" alt="Inactive" class="cursor-pointer" onclick="Role_Group_Mapping_Remove(this,' + dataItem.RGM_ID + ',' + dataItem.IsActive + ');"/>';
                                }
                            }
                            else {
                                if (dataItem.IsActive) {
                                    return '<img src="../icon/tick.png"/>';
                                } else {
                                    return '<img src="../icon/cross.png"/>';
                                }
                            }
                        },
                        attributes: {
                            style: "text-align: center;"
                        }
                    },
                    {
                        title: "Action",
                        width: 100,
                        filterable: false,
                        template: function (dataItem) {
                            var actionfield = '';
                            if (RightsList.IsEdit) {
                                actionfield += '<a><i class="fa fa-edit Theme-icon fa-1x ms-1 cursor-pointer" onclick="GetAddEditRoleGroupMappingModal(' + dataItem.RGM_ID + ');"></i></a>'
                            }
                            return actionfield;
                        }

                    },
                ],
                detailInit: function (e) {
                    $("#PageLoader").hide();
                }
            });
        }
        function GetAddEditRoleGroupMappingModal(RoleGroupMappingID) {
            if ((RoleGroupMappingID == 0 && RightsList.IsAdd == true) || (RoleGroupMappingID > 0 && RightsList.IsEdit == true)) {
                GetAddEditModalAjaxCommon(RoleGroupMappingID, "/Account/GetAddEditRoleGroupMappingModal");
            } else {
                WarningMessage('No Rights', "You Don't Have Rights To Access.", true, "Ok");
                $("#PageLoader").hide();
                return;
            }
        }
        function AddOrEdit_Role_Group_Mapping() {
            var ObjJson = new Object();
            ObjJson.RoleGroupMappingID = $("#modalrolegroupmaingid").val();
            ObjJson.RoleID = $("#modalrgmrolename option:selected").val();
            ObjJson.RoleGroupID = $("#modalrgmrolegroupname option:selected").val();
            ObjJson.Active = $("#modalrolegroupmappingisactive").is(":checked");
            var JsonData = JSON.stringify(ObjJson);
            requiredFields = ['RoleID', 'RoleGroupID'];
            if (!validateRequiredFields(ObjJson, requiredFields)) {
                return;
            }
            AddEditRemoveAjaxCommon(JsonData, "/Account/AddOrEdit_Role_Group_Mapping", null, false, 'grid2');
        }
        function Role_Group_Mapping_Remove(this_, RoleGroupMappingID, IsActive) {
            if (RightsList.IsDelete) {
                if ($(this_).attr("disabled") == "disabled") {
                    return;
                }
                $(this_).attr("disabled", "disabled");
                IsActiveEditCommon(RoleGroupMappingID, "/Account/Remove_Role_Group_Mapping", RoleMappingGridRefresh, RoleGroupMappingID, IsActive, "Role Group Mapping ID");
            } else {
                WarningMessage('No Rights', "You Don't Have Rights To Access.", true, "Ok");
                $("#PageLoader").hide();
                return;
            }
        }
        function RoleMappingGridRefresh() {
            RefreshGridData('grid2')
        }

        function Load_Roles_By_RoleGroup_Dropdown(RG_ID) {
            GetDropDownListCommonAjax(RG_ID, "/Account/Get_Roles_By_RoleGroup_Dropdown", "modalrgmrolename");
        }

        //Department Role Mapping - Add/Edit/Model/Remove
        function DepartmentRoleMappingGridLoad() {
            $("#PageLoader").show();
            $("#grid3").empty();
            var DepartmentRoleMapfieldstype = {
                rowno: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                DRM_ID: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                R_ID: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                D_ID: { type: KendoFilterTypes.Number, srtype: SRVTypes.Int },
                RoleName: { type: KendoFilterTypes.String, srtype: SRVTypes.String },
                DepartmentName: { type: KendoFilterTypes.String, srtype: SRVTypes.String },
                IsActive: { type: KendoFilterTypes.Boolean, srtype: SRVTypes.Boolean },
            }
            var _griddatasource3 = GetGridDataSourceAjaxCommon('grid3', DepartmentRoleMap_pageSize, "/Account/GetFilterData_DepartmentRoleMap_List", true, true, true, DepartmentRoleMapfieldstype, false, false);
            $("#grid3").kendoGrid({
                dataSource: _griddatasource3,
                responsive: false,
                pageable: {
                    alwaysVisible: true,
                    refresh: true,
                    pageSizes: [30, 50, 100, 500, 1000, 5000],
                    messages: {
                        display: "{0} - {1} of {2} items &nbsp;&nbsp;|&nbsp;&nbsp; Export:&nbsp;<img id='grid_exportExcel' title='Click here to export to excel file' src='/icon/excel_icon.jpg' style='width:23px; height:23px; cursor:pointer' onclick='onClickDepartmentRoleMapExportExcel(this)' /> ",
                        empty: "No data found",
                    }
                },
                sortable: true,
                resizable: false,
                reorderable: false,
                noRecords: true,
                filterable: {
                    extra: true,
                },
                dataBound: onDataBound,
                dataBinding: function (e) {
                    $("#PageLoader").hide();
                },
                columns: [
                    {
                        field: "rowno",
                        title: "Row No ",
                        width: 100,
                        filterable: false,
                        sortable: false,
                    },
                    {
                        field: "DRM_ID",
                        title: "Department Role Mapping ID",
                        width: 120,
                        hidden: true,
                    },
                    {
                        field: "R_ID",
                        title: "Role ID",
                        width: 120,
                        // hidden: true,
                    },
                    {
                        field: "D_ID",
                        title: "Department ID",
                        width: 200,
                        // hidden: true,
                    },
                    {
                        field: "D_ID",
                        originalfield: "DepartmentName",
                        title: "Department Name",
                        width: 220,
                        template: function (dataItem) {
                            return dataItem.DepartmentName;
                        },
                        filterable: { multi: true, extra: false, search: true, checkAll: false },
                        values: DepartmentList,
                    },
                    {
                        field: "R_ID",
                        originalfield: "RoleName",
                        title: "Role Name",
                        width: 200,
                        template: function (dataItem) {
                            return dataItem.RoleName;
                        },
                        filterable: { multi: true, extra: false, search: true, checkAll: false },
                        values: RoleList,
                    },
                    {
                        field: "IsActive",
                        title: "IsActive",
                        width: 120,
                        template: function (dataItem) {
                            if (RightsList.IsEdit) {
                                if (dataItem.IsActive) {
                                    return '<img src="../icon/tick.png" alt="Active" class="cursor-pointer" onclick="Department_Role_Mapping_Remove(this,' + dataItem.DRM_ID + ',' + dataItem.IsActive + ');"/>';
                                } else {
                                    return '<img src="../icon/cross.png" alt="Inactive" class="cursor-pointer" onclick="Department_Role_Mapping_Remove(this,' + dataItem.DRM_ID + ',' + dataItem.IsActive + ');"/>';
                                }
                            }
                            else {
                                if (dataItem.IsActive) {
                                    return '<img src="../icon/tick.png"/>';
                                } else {
                                    return '<img src="../icon/cross.png"/>';
                                }
                            }
                        },
                        attributes: {
                            style: "text-align: center;"
                        }
                    },
                    {
                        title: "Action",
                        width: 100,
                        filterable: false,
                        template: function (dataItem) {
                            var actionfield = '';
                            if (RightsList.IsEdit) {
                                actionfield += '<a><i class="fa fa-edit Theme-icon fa-1x ms-1 cursor-pointer" onclick="GetAddEditDepartmentRoleMappingModal(' + dataItem.DRM_ID + ');"></i></a>';
                            }
                            return actionfield;
                        }
                    },
                ],
                detailInit: function (e) {
                    $("#PageLoader").hide();
                }
            });
        }
        function GetAddEditDepartmentRoleMappingModal(DepartmentRoleMappingID) {
            if ((DepartmentRoleMappingID == 0 && RightsList.IsAdd == true) || (DepartmentRoleMappingID > 0 && RightsList.IsEdit == true)) {
                GetAddEditModalAjaxCommon(DepartmentRoleMappingID, "/Account/GetAddEditDepartmentRoleMappingModal");
            } else {
                WarningMessage('No Rights', "You Don't Have Rights To Access.", true, "Ok");
                $("#PageLoader").hide();
                return;
            }
        }
        function AddOrEdit_Department_Role_Mapping() {
            var ObjJson = new Object();
            ObjJson.DepartmentRoleMappingID = $("#modaldepartmentrolemapid").val();
            ObjJson.RoleID = $("#modaldrmrolename option:selected").val();
            ObjJson.DepartmentID = $("#modaldrmdepartmentname option:selected").val();
            ObjJson.Active = $("#modaldrmdepartmentrolemappingisactive").is(":checked");
            var JsonData = JSON.stringify(ObjJson);
            requiredFields = ['RoleID', 'DepartmentID'];
            if (!validateRequiredFields(ObjJson, requiredFields)) {
                return;
            }
            AddEditRemoveAjaxCommon(JsonData, "/Account/AddOrEdit_Department_Role_Mapping", null, false, 'grid3');
        }
        function Department_Role_Mapping_Remove(this_, DepartmentRoleMappingID, IsActive) {
            if (RightsList.IsDelete) {
                if ($(this_).attr("disabled") == "disabled") {
                    return;
                }
                $(this_).attr("disabled", "disabled");
                IsActiveEditCommon(DepartmentRoleMappingID, "/Account/Remove_Department_Role_Mapping", DepartmentRoleGridRefresh, DepartmentRoleMappingID, IsActive, "Department Role Mapping ID");
            }else{
                WarningMessage('No Rights', "You Don't Have Rights To Access.", true, "Ok");
                $("#PageLoader").hide();
                return;
            }
        }
        function DepartmentRoleGridRefresh() {
            RefreshGridData('grid3')
        }

        function Load_Roles_By_Department_Dropdown(D_ID) {
            GetDropDownListCommonAjax(D_ID, "/Account/Get_Roles_By_Department_Dropdown", "modaldrmrolename");
        }

        // Kendo Grid Scripts onDataBound, onCustomFilterValidate, onClickExportExcel, onCustomFilter, onSpecificFilter, customreportFilterObjectList, onColumnShowHideObject, onReset
        function onDataBound() {
            var wrapper = this.wrapper,
                header = wrapper.find(".k-grid-header");

            function resizeFixed() {
                var paddingRight = parseInt(header.css("padding-right"));
                header.css("width", wrapper.width() - paddingRight);
            }

            function scrollFixed() {
                var offset = $(this).scrollTop(),
                    tableOffsetTop = wrapper.offset().top,
                    tableOffsetBottom = tableOffsetTop + wrapper.height() - header.height();
                if (offset < tableOffsetTop || offset > tableOffsetBottom) {
                    header.removeClass("fixed-header");
                } else if (offset >= tableOffsetTop && offset <= tableOffsetBottom && !header.hasClass("fixed")) {
                    header.addClass("fixed-header");
                }
            }

            resizeFixed();
            $(window).resize(resizeFixed);
            $(window).scroll(scrollFixed);
            ShowHideKendoHierarchyCell("grid");
            ShowHideKendoHierarchyCell("grid1");
            ShowHideKendoHierarchyCell("grid2");
            ShowHideKendoHierarchyCell("grid3");
            $("#PageLoader").hide();
        }

        function onClickRoleExportExcel(e) {
            onClickKendoExportExcel(e, "grid", RoleOptions, "PageLoader", "Report", "ExportInExcel_RoleDetail", false, false);
        }

        function onClickRoleGroupExportExcel(e) {
            onClickKendoExportExcel(e, "grid1", RoleGroupOptions, "PageLoader", "Report", "ExportInExcel_RoleGroupDetail", false, false);
        }

        function onClickRoleGroupMapExportExcel(e) {
            onClickKendoExportExcel(e, "grid2", RoleGroupMapOptions, "PageLoader", "Report", "ExportInExcel_RoleGroupMapDetail", false, false);
        }

        function onClickDepartmentRoleMapExportExcel(e) {
            onClickKendoExportExcel(e, "grid3", DepartmentRoleMapOptions, "PageLoader", "Report", "ExportInExcel_DepartmentRoleDetail", false, false);
        }

        function onCustomFilterValidate(id) {
            var resultjson = { issuccess: false, customfilterjson: [] };
            resultjson = onCustomFilter(false, id);
            if (resultjson.issuccess) {
                RefreshGridData(id);
            }
        }

        var rolelastcustomreportFilterObjectList = [];
        var rolegrouplastcustomreportFilterObjectList = [];
        var rolegroupmaplastcustomreportFilterObjectList = [];
        var departmentrolemaplastcustomreportFilterObjectList = [];
        var lastcustomreportFilterObjectList = [];
        function onCustomFilter(IsGetLastSaved, id) {

            IsGetLastSaved = (IsGetLastSaved == undefined ? false : IsGetLastSaved);
            var customreportFilterObjectList = [];
            var resultjson = { issuccess: false, customfilterjson: customreportFilterObjectList };
            var reportFilterObject = { code: "", name: "", isFilterApplied: false, reportFilterObjectArry: [] };
            var filterobject = new Object();

            var specificreportFilterObjectList = [];
            var specificreportFilterObject = { code: "", name: "", isFilterApplied: false, reportFilterObjectArry: [] };
            var specificfilterobject = new Object();

            if (IsGetLastSaved) {
                resultjson = { issuccess: true, customfilterjson: (id == 'grid' ? rolelastcustomreportFilterObjectList : (id == 'grid1' ? rolegrouplastcustomreportFilterObjectList : (id == 'grid2' ? rolegroupmaplastcustomreportFilterObjectList : (id == 'grid3' ? departmentrolemaplastcustomreportFilterObjectList : lastcustomreportFilterObjectList)))) };
                return resultjson;
            }

            if ($('#txtdate').val() != "" && $('#txtenddate').val() != "") {
                SetCustomFilterValue(customreportFilterObjectList, reportFilterObject, filterobject, "and", $('#txtdate').val(), KendoGridFilterType.isequalorgreather, KendoFilterTypes.Date, SRVTypes.Date, false, 0, "Created_On_Date", "Created_On_Date", false);
                SetCustomFilterValue(customreportFilterObjectList, reportFilterObject, filterobject, "and", $('#txtenddate').val(), KendoGridFilterType.isequalorless, KendoFilterTypes.Date, SRVTypes.Date, false, 0, "Created_On_Date", "Created_On_Date", true);

                onSpecificFilter(id, specificreportFilterObjectList, specificreportFilterObject, specificfilterobject, "and", $('#txtdate').val()
                    , KendoGridFilterType.isequalorgreather, KendoFilterTypes.Date, SRVTypes.Date, false, 0, "Created_On_Date", "Created_On_Date", false);
                onSpecificFilter(id, specificreportFilterObjectList, specificreportFilterObject, specificfilterobject, "and", $('#txtenddate').val()
                    , KendoGridFilterType.isequalorless, KendoFilterTypes.Date, SRVTypes.Date, false, 0, "Created_On_Date", "Created_On_Date", true);
            }

            if ($('#txtOrigHub').val() != "") {
                SetCustomFilterValue(customreportFilterObjectList, reportFilterObject, filterobject, "and", $('#txtOrigHub').val(), KendoGridFilterType.inlistfilter, KendoFilterTypes.String, SRVTypes.UpperString, false, 0, "OrigHub", "OrigHub", false);
            }

            if (id == 'grid') {
                rolelastcustomreportFilterObjectList = customreportFilterObjectList;
            }
            else if (id == 'grid1') {
                rolegrouplastcustomreportFilterObjectList = customreportFilterObjectList;
            }
            else if (id == 'grid2') {
                rolegroupmaplastcustomreportFilterObjectList = customreportFilterObjectList;
            }
            else if (id == 'grid3') {
                departmentrolemaplastcustomreportFilterObjectList = customreportFilterObjectList;
            }
            else {
                lastcustomreportFilterObjectList = customreportFilterObjectList;
            }
            resultjson = { issuccess: true, customfilterjson: customreportFilterObjectList };

            return resultjson;
        }

        function onSpecificFilter(id, specificreportFilterObjectList, specificreportFilterObject, specificfilterobject, logic, value, filtertype, fieldtype, srvfieldtype, islist, listtype, code, name, isprevioussamecode) {
            if (code == 'Created_On_Date') {
                var dateObject = new Date(value)
                dateObject.setDate(dateObject.getDate() + (isprevioussamecode == false ? -1 : 1));
                var newvalue = formatDateToDateTime(dateObject, false);
                SetCustomFilterValue(specificreportFilterObjectList, specificreportFilterObject, specificfilterobject, logic, newvalue, filtertype, fieldtype, srvfieldtype, islist, listtype, "UTC_Created_On_Date", "UTC_Created_On_Date", isprevioussamecode);
            }
        }

        var rolecustomreportFilterObjectList = [];
        var rolegroupcustomreportFilterObjectList = [];
        var rolegroupmapcustomreportFilterObjectList = [];
        var departmentrolemapcustomreportFilterObjectList = [];
        var customreportFilterObjectList = [];
        function onColumnShowHideObject(id) {
            if (id == 'grid') {
                return rolecustomreportFilterObjectList = [];
            }
            else if (id == 'grid1') {
                return rolegroupcustomreportFilterObjectList = [];
            }
            else if (id == 'grid2') {
                return rolegroupmapcustomreportFilterObjectList = [];
            }
            else if (id == 'grid3') {
                return departmentrolemapcustomreportFilterObjectList = [];
            }
            else {
                return customreportFilterObjectList = [];
            }

            return customreportFilterObjectList;
        }

        function onReset() {
            $("#dvProg").show();
            $('#txtdate').val($("#originalstartdate").val());
            $('#txtenddate').val($("#originalenddate").val());
            $('#txtOrigHub').html($("#hublist").html());
            $('#txtDestHub').html($("#hublist").html());
            $('#txtCurrentHub').html($("#hublist").html());
            $('#txtReturnStatus').html($("#returnstatuslist").html());
            $('#txtDispStatus').html($("#dispstatuslist").html());
            $('#txtReasonReturn').html($("#returnreasonlist").html());
            $('#txtPendingDayFrom').val('');
            $('#txtPendingDayTo').val('');
            $('#txtReturnNo').val('');
            $('#txtClientID').html($("#clientlist").html())
            $(".select2").select2();
            $("#dvProg").hide();
        }
    </script>
}