@{
    ViewBag.Title = "Page Chart";
    Layout = null;
}

<link rel="icon" type="image/png" sizes="16x16" href="~/img/IconLogo.png" />
<link href="~/css/Ample/style.min.css?ID=@ViewBag.GUID" rel="stylesheet" />
<link rel="stylesheet" href="~/css/Custom.css?ID=@ViewBag.GUID" />
<link rel="stylesheet" type="text/css" href="~/css/select2.min.css?ID=@ViewBag.GUID" />
<link rel="stylesheet" href="~/css/Custom.css?ID=@ViewBag.GUID" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css?ID=@ViewBag.GUID" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css?ID=@ViewBag.GUID" />
<style>
    .btnBack {
        background: #707CD2;
        box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;
        position: fixed;
        top: 10px;
        right: 10px;
        padding: 9px;
        border-radius: 50%;
        cursor: pointer;
        outline: none;
        text-decoration: none;
        z-index: 999;
    }

        .btnBack i {
            color: #fff;
        }

    .center-me {
        display: flex;
        justify-content: center;
        align-items: center;
    }
</style>

<!--Wrapper Start -->
<div class="container-fluid p-4 bg-white rounded">
    <a href="/Account/Home" class="btnBack"><i class="fa-solid fa-circle-arrow-left"></i></a>

    <div class="row justify-content-center">
        <div class="col-xl-3 col-lg-3 col-md-3 col-sm-4 mb-3">
            <div class="form-item">
                <select id="selectApplication" class="control-select form-control select2" type="text" onchange="OnChangeDropdownGetValue(this)" required>
                    @{
                        <option value="" selected="selected">[Select Option]</option>
                        for (int i = 0; i < ViewBag.ApplicationList.Rows.Count; i++)
                        {
                            <option value="@ViewBag.ApplicationList.Rows[i]["code"].ToString()">@ViewBag.ApplicationList.Rows[i]["name"].ToString()</option>
                        }
                    }
                </select>
                <label class="control-label" for="selectCtrl">Application</label>
            </div>
        </div>
        <div class="col-xl-3 col-lg-3 col-md-3 col-sm-4 mb-3">
            <div class="form-item">
                <select id="selectUsers" class="control-select form-control select2" type="text" onchange="OnChangeDropdownGetValue(this)" required>
                    @{
                        <option value="" selected="selected">[Select Option]</option>
                        for (int i = 0; i < ViewBag.UserList.Rows.Count; i++)
                        {
                            <option value="@ViewBag.UserList.Rows[i]["code"].ToString()">@ViewBag.UserList.Rows[i]["name"].ToString()</option>
                        }
                    }
                </select>
                <label class="control-label" for="selectCtrl">Users</label>
            </div>
        </div>
        <div class="col-xl-3 col-lg-3 col-md-3 col-sm-4 mb-3">
            <div class="form-item">
                <select id="selectRoles" class="control-select form-control select2" type="text" onchange="OnChangeDropdownGetValue(this)" required>
                    @{
                        <option value="" selected="selected">[Select Option]</option>
                        for (int i = 0; i < ViewBag.RolesList.Rows.Count; i++)
                        {
                            <option value="@ViewBag.RolesList.Rows[i]["code"].ToString()">@ViewBag.RolesList.Rows[i]["name"].ToString()</option>
                        }
                    }
                </select>
                <label class="control-label" for="selectCtrl">Roles</label>
            </div>
        </div>
    </div>

    <div class="row justify-content-between">
        <div class="col-xl-2 col-lg-2 col-md-2 col-sm-2 mb-3">
            <div class="form-item">
                <select id="selectChartSymbol" class="control-select form-control" type="text" onchange="OnChangeDropdownGetValue(this)" required>
                    <option value="emptyCircle">Empty Circle</option>
                    <option value="circle">Circle</option>
                    <option value="rect">Rectangle</option>
                    <option value="roundRect">Rounded Rectangle</option>
                    <option value="triangle">Triangle</option>
                    <option value="diamond">Diamond</option>
                    <option value="pin">Pin</option>
                    <option value="arrow">Arrow</option>
                    <option value="none">No symbol (invisible)</option>
                </select>
                <label class="control-label" for="selectCtrl">Chart Symbol</label>
            </div>
        </div>
        <div class="col-xl-3 col-lg-3 col-md-3 col-sm-3 mb-3 center-me">
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="" id="chkShowAllChilds" onchange="OnChangeDropdownGetValue(this)">
                <label class="form-check-label" for="chkShowAllChilds" style="font-size: 19px;">
                    Show All Child
                </label>
            </div>
        </div>
        <div class="col-xl-3 col-lg-3 col-md-3 col-sm-3 mb-3 center-me">
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="" id="chkShowRights" onchange="OnChangeDropdownGetValue(this)">
                <label class="form-check-label" for="chkShowRights" style="font-size: 19px;">
                    Show Rights
                </label>
            </div>
        </div>
        <div class="col-xl-3 col-lg-3 col-md-3 col-sm-3 mb-3">
            <div class="form-item">
                <select id="selectChartLayout" class="control-select form-control" type="text" onchange="OnChangeDropdownGetValue(this)" required>
                    <option value="horizontal">Horizontal layout (left-to-right tree layout)</option>
                    <option value="vertical">Vertical layout (top-to-bottom tree layout)</option>
                    @* <option value="radial">Radial layout (top-to-bottom tree layout)</option>
                    <option value="circular">Circular layout for tree</option>
                    <option value="force">Force-directed layout</option>
                    <option value="circular">Circular layout for force-directed graph</option>
                    <option value="none">No specified layout</option> *@
                </select>
                <label class="control-label" for="selectCtrl">Chart Layout</label>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-xl-12 col-lg-12 col-md-12 col-sm-12">
            <div id="myChart" style="width: 100%; height: 800px"></div>
        </div>
    </div>

</div>

<script src="https://code.jquery.com/jquery-2.2.4.min.js?ID=@ViewBag.GUID"></script>
<script src="https://code.jquery.com/ui/1.13.1/jquery-ui.min.js?ID=@ViewBag.GUID"></script>
<script src="~/lib/bootstrap/js/bootstrap.bundle.min.js?ID=@ViewBag.GUID"></script>
<script src="~/js/select2.js?ID=@ViewBag.GUID" type="text/javascript"></script>
<script src="~/js/custom-Validation.js?ID=@ViewBag.GUID"></script>
<script src="~/js/all-echarts.min.js?ID=@ViewBag.GUID"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js?ID=@ViewBag.GUID"></script>

<script>
    toastr.options = {
        closeButton: true,
        progressBar: true,
        positionClass: 'toast-top-right',
        timeOut: 5000
    };
    $(".select2").select2();
    //PageChartLoad(null, null, null);

    var counter = 1;
    var myChart = echarts.init(document.getElementById('myChart'));

    function PageChartLoad(AppID = null, UserName = null, RoleID = null) {
        counter = 1;
        $("#PageLoader").show();
        var ObjJson = new Object();
        ObjJson.AppID = parseInt(AppID);
        ObjJson.UserName = UserName;
        ObjJson.RoleID = RoleID;
        $.ajax({
            type: "POST",
            url: "/Account/GetPageChart",
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify(ObjJson),
            dataType: "json",
            success: function (response) {
                if (response == "Session is Expired") {
                    SessionMessage(true);
                    $("#PageLoader").hide();
                    return;
                }
                if (response !== "") {
                    var chartSymbol = $("#selectChartSymbol option:selected").val();
                    var chartLayout = $("#selectChartLayout option:selected").val();
                    var ShowAllChilds = $("#chkShowAllChilds").is(":checked");
                    var ShowRights = $("#chkShowRights").is(":checked");
                    GetPageCharts(response, chartLayout, chartSymbol, ShowAllChilds, ShowRights);
                }
                $("#PageLoader").hide();
            },
            failure: function (response) {
                $("#PageLoader").hide();
            },
            error: function (response) {
                $("#PageLoader").hide();
            }
        });
    }

    function GetPageCharts(result, chartLayout, chartSymbol, ShowAllChilds = false, ShowRights = false) {
        myChart.dispose();
        myChart = echarts.init(document.getElementById('myChart'));

        myChart.showLoading();
        var series = [];
        var data = [];
        var optiondata = [];
        var IsChildExists = true;

        $.each(result, function (index, obj) {
            data = [];
            var applicationNode = {
                name: obj.Application,
                children: []
            };
            var options = {
                name: obj.Application.replace(/\s/g, ""),
                icon: "rectangle",
            };

            if (obj.pageGroupInfo !== null) {
                $.each(obj.pageGroupInfo, function (pgIndex, pageGroup) {
                    var PageGroupNode = {
                        name: pageGroup.PageGroupName,
                        children: []
                    };

                    if (!ShowAllChilds) {
                        IsChildExists = pageGroup.IsChildExists;
                    }

                    if (pageGroup.pageInfo !== null) {
                        $.each(pageGroup.pageInfo, function (piIndex, pageInfo) {
                            var PageNode = {
                                name: pageInfo.PageName,
                                children: []
                            };

                            if (pageInfo.pageRightsInfo !== null) {
                                $.each(pageInfo.pageRightsInfo, function (prIndex, pageRight) {
                                    var PageRightNode = {
                                        name: pageRight.PageRightName,
                                        children: []
                                    };
                                    PageNode.children.push(PageRightNode);
                                });
                            }

                            PageGroupNode.children.push(PageNode);
                        });
                    }

                    if (IsChildExists) {
                        applicationNode.children.push(PageGroupNode);
                    }
                });
            }

            optiondata.push(options);
            data.push(applicationNode);
            series.push(GetEChartSeriesObjects(data, obj.Application.replace(/\s/g, ""), chartLayout, chartSymbol, ShowRights));
            counter++;
        });

        myChart.hideLoading();
        myChart.setOption(
            (option = {
                tooltip: {
                    trigger: "item",
                    triggerOn: "mousemove",
                },
                legend: {
                    top: "2%",
                    left: "3%",
                    orient: "vertical",
                    data: optiondata,
                    borderColor: "#c23531",
                },
                series: series,
                toolbox: {
                    feature: {
                        saveAsImage: {}
                    }
                },
                events: {
                    click: function (params) {
                        console.log('Clicked on', params);
                    }
                }
            })
        );
        option && myChart.setOption(option);
    }

    function GetEChartSeriesObjects(data, name, chartLayout, chartSymbol, ShowRights) {
        var series;

        if (counter == 1) {
            series = {
                type: "tree",
                name: name,
                data: data,
                top: (chartLayout == 'vertical' ? "8%" : "5%"),
                left: (chartLayout == 'vertical' ? "2%" : "15%"),
                bottom: (chartLayout == 'vertical' ? "20%" : "2%"),
                right: (chartLayout == 'vertical' ? "2%" : "60%"),
                symbolSize: 7,
                label: (chartLayout == 'vertical' ? {
                    position: 'top',
                    rotate: -90,
                    verticalAlign: 'middle',
                    align: 'right',
                    fontSize: 9
                } : {
                    position: "left",
                    verticalAlign: "middle",
                    align: "right",
                    fontSize: 9
                }),
                leaves: {
                    label: (chartLayout == 'vertical' ? {
                        position: 'bottom',
                        rotate: -90,
                        verticalAlign: 'middle',
                        align: 'left'
                    } : {
                        position: "right",
                        verticalAlign: "middle",
                        align: "left"
                    }),
                },
                emphasis: {
                    focus: "descendant",
                },
                orient: chartLayout,
                layout: chartLayout,
                symbol: chartSymbol,
                symbolSize: 9,
                roam: true,
                expandAndCollapse: true,
                initialTreeDepth: (ShowRights == true ? 3 : 2),
                animationDuration: 550,
                animationDurationUpdate: 750,
            };
        }
        else if (counter > 1) {
            series = {
                type: "tree",
                name: name,
                data: data,
                top: "20%",
                left: "60%",
                bottom: "22%",
                right: "18%",
                symbolSize: 7,
                label: {
                    position: "left",
                    verticalAlign: "middle",
                    align: "right",
                },
                leaves: {
                    label: {
                        position: "right",
                        verticalAlign: "middle",
                        align: "left",
                    },
                },
                emphasis: {
                    focus: "descendant",
                },
                expandAndCollapse: true,
                animationDuration: 550,
                animationDurationUpdate: 750,
            };
        }
        return series;
    }

    function OnChangeDropdownGetValue(_) {
        var applicationid = $("#selectApplication option:selected").val();
        var username = $("#selectUsers option:selected").val();
        var roleid = $("#selectRoles option:selected").val();

        var dropdownId = _.id;
        var selectedValue = _.value;

        if (applicationid !== "" && username === "" && roleid === "") {
            PageChartLoad(applicationid, null, null);
        }
        else if (applicationid === "" && username !== "" && roleid === "") {
            PageChartLoad(null, username, null);
        }
        else if (applicationid === "" && username === "" && roleid !== "") {
            PageChartLoad(null, null, roleid);
        }
        else if (applicationid !== "" && username !== "" && roleid === "") {
            PageChartLoad(applicationid, username, null);
        }
        else if (applicationid !== "" && username === "" && roleid !== "") {
            PageChartLoad(applicationid, null, roleid);
        }
        else if (applicationid === "" && username !== "" && roleid !== "") {
            PageChartLoad(null, username, roleid);
        }
        else if (applicationid !== "" && username !== "" && roleid !== "") {
            PageChartLoad(applicationid, username, roleid);
        }
    }
</script>
